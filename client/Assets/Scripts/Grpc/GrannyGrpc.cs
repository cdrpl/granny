// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: granny.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proto {
  public static partial class Auth
  {
    static readonly string __ServiceName = "proto.Auth";

    static readonly grpc::Marshaller<global::Proto.SignUpRequest> __Marshaller_proto_SignUpRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.SignUpRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.SignUpResponse> __Marshaller_proto_SignUpResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.SignUpResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.SignInRequest> __Marshaller_proto_SignInRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.SignInRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.SignInResponse> __Marshaller_proto_SignInResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.SignInResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.SignUpRequest, global::Proto.SignUpResponse> __Method_SignUp = new grpc::Method<global::Proto.SignUpRequest, global::Proto.SignUpResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignUp",
        __Marshaller_proto_SignUpRequest,
        __Marshaller_proto_SignUpResponse);

    static readonly grpc::Method<global::Proto.SignInRequest, global::Proto.SignInResponse> __Method_SignIn = new grpc::Method<global::Proto.SignInRequest, global::Proto.SignInResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignIn",
        __Marshaller_proto_SignInRequest,
        __Marshaller_proto_SignInResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.GrannyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Auth</summary>
    [grpc::BindServiceMethod(typeof(Auth), "BindService")]
    public abstract partial class AuthBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Proto.SignUpResponse> SignUp(global::Proto.SignUpRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.SignInResponse> SignIn(global::Proto.SignInRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Auth</summary>
    public partial class AuthClient : grpc::ClientBase<AuthClient>
    {
      /// <summary>Creates a new client for Auth</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AuthClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Auth that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AuthClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AuthClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AuthClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Proto.SignUpResponse SignUp(global::Proto.SignUpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignUp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.SignUpResponse SignUp(global::Proto.SignUpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignUp, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.SignUpResponse> SignUpAsync(global::Proto.SignUpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignUpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.SignUpResponse> SignUpAsync(global::Proto.SignUpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignUp, null, options, request);
      }
      public virtual global::Proto.SignInResponse SignIn(global::Proto.SignInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignIn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.SignInResponse SignIn(global::Proto.SignInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignIn, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.SignInResponse> SignInAsync(global::Proto.SignInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignInAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.SignInResponse> SignInAsync(global::Proto.SignInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignIn, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AuthClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuthClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AuthBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SignUp, serviceImpl.SignUp)
          .AddMethod(__Method_SignIn, serviceImpl.SignIn).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AuthBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SignUp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.SignUpRequest, global::Proto.SignUpResponse>(serviceImpl.SignUp));
      serviceBinder.AddMethod(__Method_SignIn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.SignInRequest, global::Proto.SignInResponse>(serviceImpl.SignIn));
    }

  }
  public static partial class Room
  {
    static readonly string __ServiceName = "proto.Room";

    static readonly grpc::Marshaller<global::Proto.GetRoomRequest> __Marshaller_proto_GetRoomRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.GetRoomRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.GetRoomResponse> __Marshaller_proto_GetRoomResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.GetRoomResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.JoinRoomReq> __Marshaller_proto_JoinRoomReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.JoinRoomReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.JoinRoomRes> __Marshaller_proto_JoinRoomRes = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.JoinRoomRes.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.GetRoomRequest, global::Proto.GetRoomResponse> __Method_GetRoom = new grpc::Method<global::Proto.GetRoomRequest, global::Proto.GetRoomResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRoom",
        __Marshaller_proto_GetRoomRequest,
        __Marshaller_proto_GetRoomResponse);

    static readonly grpc::Method<global::Proto.JoinRoomReq, global::Proto.JoinRoomRes> __Method_JoinRoom = new grpc::Method<global::Proto.JoinRoomReq, global::Proto.JoinRoomRes>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinRoom",
        __Marshaller_proto_JoinRoomReq,
        __Marshaller_proto_JoinRoomRes);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.GrannyReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Room</summary>
    [grpc::BindServiceMethod(typeof(Room), "BindService")]
    public abstract partial class RoomBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Proto.GetRoomResponse> GetRoom(global::Proto.GetRoomRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.JoinRoomRes> JoinRoom(global::Proto.JoinRoomReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Room</summary>
    public partial class RoomClient : grpc::ClientBase<RoomClient>
    {
      /// <summary>Creates a new client for Room</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RoomClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Room that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RoomClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RoomClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RoomClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Proto.GetRoomResponse GetRoom(global::Proto.GetRoomRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.GetRoomResponse GetRoom(global::Proto.GetRoomRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRoom, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.GetRoomResponse> GetRoomAsync(global::Proto.GetRoomRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.GetRoomResponse> GetRoomAsync(global::Proto.GetRoomRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRoom, null, options, request);
      }
      public virtual global::Proto.JoinRoomRes JoinRoom(global::Proto.JoinRoomReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.JoinRoomRes JoinRoom(global::Proto.JoinRoomReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinRoom, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.JoinRoomRes> JoinRoomAsync(global::Proto.JoinRoomReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.JoinRoomRes> JoinRoomAsync(global::Proto.JoinRoomReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinRoom, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RoomClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RoomClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RoomBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetRoom, serviceImpl.GetRoom)
          .AddMethod(__Method_JoinRoom, serviceImpl.JoinRoom).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RoomBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetRoom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.GetRoomRequest, global::Proto.GetRoomResponse>(serviceImpl.GetRoom));
      serviceBinder.AddMethod(__Method_JoinRoom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.JoinRoomReq, global::Proto.JoinRoomRes>(serviceImpl.JoinRoom));
    }

  }
}
#endregion
